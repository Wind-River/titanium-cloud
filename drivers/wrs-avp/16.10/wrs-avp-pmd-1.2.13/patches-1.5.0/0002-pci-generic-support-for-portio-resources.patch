From 2eb77bd32a56b2316346ff793497062254fc8f2d Mon Sep 17 00:00:00 2001
From: Allain Legacy <allain.legacy@windriver.com>
Date: Tue, 12 Aug 2014 19:55:23 -0400
Subject: [PATCH 2/3] pci: generic support for portio resources

Signed-off-by: Allain Legacy <allain.legacy@windriver.com>
---
 lib/librte_eal/common/include/rte_pci.h |  6 ++++
 lib/librte_eal/linuxapp/eal/eal_pci.c   | 52 +++++++++++++--------------------
 2 files changed, 26 insertions(+), 32 deletions(-)

diff --git a/lib/librte_eal/common/include/rte_pci.h b/lib/librte_eal/common/include/rte_pci.h
index 468be2b..6b3271d 100644
--- a/lib/librte_eal/common/include/rte_pci.h
+++ b/lib/librte_eal/common/include/rte_pci.h
@@ -110,11 +110,17 @@ struct rte_pci_resource {
 	uint64_t phys_addr;   /**< Physical address, 0 if no resource. */
 	uint64_t len;         /**< Length of the resource. */
 	void *addr;           /**< Virtual address, NULL when not mapped. */
+	unsigned flags;		  /**< I/O Resource flag */
 };
 
 /** Maximum number of PCI resources. */
 #define PCI_MAX_RESOURCE 7
 
+/**@{ I/O Resource flags */
+#define IORESOURCE_IO   0x00000100
+#define IORESOURCE_MEM  0x00000200
+/**@} */
+
 /**
  * A structure describing an ID for a PCI driver. Each driver provides a
  * table of these IDs for each device that it supports.
diff --git a/lib/librte_eal/linuxapp/eal/eal_pci.c b/lib/librte_eal/linuxapp/eal/eal_pci.c
index 73c0828..f137f75 100644
--- a/lib/librte_eal/linuxapp/eal/eal_pci.c
+++ b/lib/librte_eal/linuxapp/eal/eal_pci.c
@@ -468,12 +468,10 @@ pci_uio_map_resource(struct rte_pci_device *dev)
 	struct dirent *e;
 	DIR *dir;
 	char dirname[PATH_MAX];
-	char filename[PATH_MAX];
 	char dirname2[PATH_MAX];
 	char devname[PATH_MAX]; /* contains the /dev/uioX */
 	void *mapaddr;
 	unsigned uio_num;
-	unsigned long start,size;
 	uint64_t phaddr;
 	uint64_t offset;
 	uint64_t pagesz;
@@ -485,8 +483,7 @@ pci_uio_map_resource(struct rte_pci_device *dev)
 	dev->intr_handle.fd = -1;
 
 	/* secondary processes - use already recorded details */
-	if ((rte_eal_process_type() != RTE_PROC_PRIMARY) &&
-		(dev->id.vendor_id != PCI_VENDOR_ID_QUMRANET))
+	if (rte_eal_process_type() != RTE_PROC_PRIMARY)
 		return (pci_uio_map_secondary(dev));
 
 	/* depending on kernel version, uio can be located in uio/uioX
@@ -548,31 +545,6 @@ pci_uio_map_resource(struct rte_pci_device *dev)
 		return -1;
 	}
 
-	if(dev->id.vendor_id == PCI_VENDOR_ID_QUMRANET) {
-		/* get portio size */
-		rte_snprintf(filename, sizeof(filename),
-			 "%s/portio/port0/size", dirname2);
-		if (eal_parse_sysfs_value(filename, &size) < 0) {
-			RTE_LOG(ERR, EAL, "%s(): cannot parse size\n",
-				__func__);
-			return -1;
-		}
-
-		/* get portio start */
-		rte_snprintf(filename, sizeof(filename),
-			 "%s/portio/port0/start", dirname2);
-		if (eal_parse_sysfs_value(filename, &start) < 0) {
-			RTE_LOG(ERR, EAL, "%s(): cannot parse portio start\n",
-				__func__);
-			return -1;
-		}
-		dev->mem_resource[0].addr = (void *)(uintptr_t)start;
-		dev->mem_resource[0].len =  (uint64_t)size;
-		RTE_LOG(DEBUG, EAL, "PCI Port IO found start=0x%lx with size=0x%lx\n", start, size);
-		/* rte_virtio_pmd does not need any other bar even if available */
-		return (0);
-	}
-	
 	/* allocate the mapping details for secondary processes*/
 	if ((uio_res = rte_zmalloc("UIO_RES", sizeof (*uio_res), 0)) == NULL) {
 		RTE_LOG(ERR, EAL,
@@ -602,6 +574,10 @@ pci_uio_map_resource(struct rte_pci_device *dev)
 		if ((phaddr = dev->mem_resource[i].phys_addr) == 0)
 			continue;
  
+		/* skip IO resources */
+		if (dev->mem_resource[i].flags & IORESOURCE_IO)
+			continue;
+
 		for (j = 0; j != nb_maps && (phaddr != maps[j].phaddr ||
 				dev->mem_resource[i].len != maps[j].size);
 				j++)
@@ -628,9 +604,6 @@ pci_uio_map_resource(struct rte_pci_device *dev)
 	return (0);
 }
 
-/* parse the "resource" sysfs file */
-#define IORESOURCE_MEM  0x00000200
-
 static int
 pci_parse_sysfs_resource(const char *filename, struct rte_pci_device *dev)
 {
@@ -653,6 +626,8 @@ pci_parse_sysfs_resource(const char *filename, struct rte_pci_device *dev)
 		return -1;
 	}
 
+	RTE_LOG(DEBUG, EAL, "Parsing sysfs at: %s\n", filename);
+
 	for (i = 0; i<PCI_MAX_RESOURCE; i++) {
 
 		if (fgets(buf, sizeof(buf), f) == NULL) {
@@ -681,6 +656,19 @@ pci_parse_sysfs_resource(const char *filename, struct rte_pci_device *dev)
 			dev->mem_resource[i].len = end_addr - phys_addr + 1;
 			/* not mapped for now */
 			dev->mem_resource[i].addr = NULL; 
+			dev->mem_resource[i].flags = IORESOURCE_MEM;
+			RTE_LOG(DEBUG, EAL, "BAR%u contains a memory resource at 0x%"PRIx64" length %"PRIu64"\n",
+					i, dev->mem_resource[i].phys_addr, dev->mem_resource[i].len);
+		}
+
+		if (flags & IORESOURCE_IO) {
+			dev->mem_resource[i].phys_addr = phys_addr;
+			dev->mem_resource[i].len = end_addr - phys_addr + 1;
+			/* mapped directly to physical address */
+			dev->mem_resource[i].addr = (void*)(uintptr_t)phys_addr;
+			dev->mem_resource[i].flags = IORESOURCE_IO;
+			RTE_LOG(DEBUG, EAL, "BAR%u contains a portio resource at 0x%"PRIx64" length %"PRIu64"\n",
+					i, dev->mem_resource[i].phys_addr, dev->mem_resource[i].len);
 		}
 	}
 	fclose(f);
-- 
1.9.1

